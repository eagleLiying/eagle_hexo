{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Nlvi/source/script/bootstarp.js","path":"script/bootstarp.js","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/style/style.styl","path":"style/style.styl","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/syuanpi/syuanpi.min.css","path":"syuanpi/syuanpi.min.css","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/src/plugins.js","path":"script/src/plugins.js","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/font/iconfont/iconfont.eot","path":"font/iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/font/iconfont/iconfont.ttf","path":"font/iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/font/iconfont/iconfont.svg","path":"font/iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/font/iconfont/iconfont.woff","path":"font/iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/src/nlvi.js","path":"script/src/nlvi.js","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/scheme/balance.js","path":"script/scheme/balance.js","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/src/utils.js","path":"script/src/utils.js","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/font/allura/allura.ttf","path":"font/allura/allura.ttf","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/lib/jquery/jquery-3.2.1.min.js","path":"script/lib/jquery/jquery-3.2.1.min.js","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/lib/lightbox/images/close.png","path":"script/lib/lightbox/images/close.png","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/lib/lightbox/css/lightbox.min.css","path":"script/lib/lightbox/css/lightbox.min.css","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/lib/lightbox/images/next.png","path":"script/lib/lightbox/images/next.png","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/lib/lightbox/images/loading.gif","path":"script/lib/lightbox/images/loading.gif","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/lib/lightbox/images/prev.png","path":"script/lib/lightbox/images/prev.png","modified":1,"renderable":1},{"_id":"themes/Nlvi/source/script/lib/lightbox/js/lightbox.min.js","path":"script/lib/lightbox/js/lightbox.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/Nlvi/.gitignore","hash":"ecd942f3596baf72b85701726f5ed443357ebbb7","modified":1527364222000},{"_id":"themes/Nlvi/_config.yml","hash":"4015ece448b22e3e05dc80f1507b2e2e10370e6e","modified":1528299257085},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1528294440165},{"_id":"themes/Nlvi/LICENSE","hash":"6982c21214397aa93d5dd277a878b54499b32d26","modified":1527364222000},{"_id":"themes/Nlvi/README.md","hash":"14064afc68bb0e6e437d0ce0354c04224471de5f","modified":1527364222000},{"_id":"themes/Nlvi/package.json","hash":"f33b61768fb453e59a4f77d9b67a4663929972ea","modified":1527364222000},{"_id":"source/about/index.md","hash":"9511231fc87695771ec798ea8fcfe9876a8df4ec","modified":1528548510465},{"_id":"source/_posts/hexoGithubIo.md","hash":"0cda2598f5b9d167b2103900d09105b88a11db92","modified":1528298744485},{"_id":"source/_posts/.DS_Store","hash":"eec51777b58a4300f86ea31951802a1541a9439f","modified":1528294447892},{"_id":"source/_posts/page.png","hash":"bcc8884f0fa4b9491eff8c4511d7ebc95a4d1f40","modified":1528294402348},{"_id":"themes/Nlvi/languages/en.yml","hash":"6a0245b347e6ed34335854faf7dfe468d794310a","modified":1527364222000},{"_id":"themes/Nlvi/languages/default.yml","hash":"6a0245b347e6ed34335854faf7dfe468d794310a","modified":1527364222000},{"_id":"themes/Nlvi/languages/ja.yml","hash":"4a0560f79c686f37191810a3667eedb90463c1f1","modified":1527364222000},{"_id":"themes/Nlvi/languages/zh-TW.yml","hash":"5d01de648d0e620006062da5fd3a7d23725d3c4e","modified":1527364222000},{"_id":"themes/Nlvi/languages/zh-CN.yml","hash":"3b3b71c3e3b48748ec09153340a019d373e6e78f","modified":1527364222000},{"_id":"themes/Nlvi/layout/_layout.swig","hash":"d99ea12094024da6d5e5c490e2463ffd0fac31b2","modified":1527364222000},{"_id":"themes/Nlvi/layout/post.swig","hash":"4649a9a0c2ec2241bc5a6ce37ab7799624a8d577","modified":1527364222000},{"_id":"themes/Nlvi/layout/page.swig","hash":"ce3eb5bdde585f32e383d8e705ebe438533b596f","modified":1527364222000},{"_id":"themes/Nlvi/layout/archive.swig","hash":"a01a091054af5ee0e10e3a2bb8669593abfb8e08","modified":1527364222000},{"_id":"themes/Nlvi/layout/index.swig","hash":"d5f3471d053c3ed27b5bb95e83ebae50f7f407da","modified":1527364222000},{"_id":"themes/Nlvi/_source/about/index.md","hash":"760186d55a53a04c323e6fd0184fdcefec464a94","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/friendlink.swig","hash":"a33dbcca300217329eb0699385f769998cf2568f","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/head.swig","hash":"46aaa8cff0c9ecd5f4502565e8437d3c60eb8821","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/archive.swig","hash":"2ee54dbbbcd329ceb5f6b5b0a1e2113afa89557a","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/footer.swig","hash":"59ede514b2f629916830665d34c8aa21898f521d","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/header.swig","hash":"2e09870b6ae5ce49b8e5a85d052fbd4a3bd820d2","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/main.swig","hash":"76478b162c47c32fdb2ce98200e46241fb1623a6","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/pagenum.swig","hash":"1f3b9ea5f315c5dee1f554b5b6d363c13214fd60","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/post.swig","hash":"89de5d8a584cd3e327de4b97e92004cdbcf51cde","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/progress.swig","hash":"631faa669004de37b0a8812d709c95eb8948143e","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/tagcloud.swig","hash":"96fe84d20323183a6337786aa0a1b7edbb309ad9","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/script.swig","hash":"f6cead86a5c72c3e2d2361316a730153f2c3d7d9","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/config.swig","hash":"8340614f7b7fea395681e3521d14fcf401e5b0ec","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/backtop.swig","hash":"4b3e30aa31e80b883bf9b4ecbdbd3f409c26aad9","modified":1527364222000},{"_id":"themes/Nlvi/source/script/bootstarp.js","hash":"d925ff492705c47c3ddbd59ecfeeec63ba7f409e","modified":1527364222000},{"_id":"themes/Nlvi/source/style/style.styl","hash":"14d939a40d53788105fb06a1efb34bc3bac7ea79","modified":1527364222000},{"_id":"themes/Nlvi/source/syuanpi/syuanpi.min.css","hash":"6df4bd0dd7111904cd443e58793fa7135b989806","modified":1527364222000},{"_id":"themes/Nlvi/source/script/src/plugins.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_feature/banderole.swig","hash":"9cfb539a98cae7e4ff3a09da9d5bd359d6744a58","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_feature/balance.swig","hash":"0011ecc2e26e04d3fc17d05dc58d0fbf9d3e9043","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_feature/common.swig","hash":"257b9de47dfbd0e9caba7716212879b3fbd7d2ec","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_footer/contact.swig","hash":"4472f77a37b77145527e46d4c3692f98a0396d8f","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_footer/copyright.swig","hash":"e92e3fcf1551b736191329f353f78aab3d885c64","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_head/link.swig","hash":"8b8818d7b9919df1843d72fc7906646aecec7fb6","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_head/meta.swig","hash":"7fe1dc067679ce204f8e47d9c269cc651911c7ae","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_header/logo.swig","hash":"e20cee30dd7acd408573af5cc6aeb653caf5cd07","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_header/nav.swig","hash":"f0b6208a9b4c154ae5f35b836235d2d75801ab22","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_header/mobile.swig","hash":"2cc8806a15e323fffffddee1bc249d31a8c59a21","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_post/reward.swig","hash":"a698e2d82475e84b7e66692eef9bcb7c331d6485","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_post/copyright.swig","hash":"c9626d9abdb342a11ab73d58b3f2e6dd625e8a80","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_post/comments.swig","hash":"21a4ba6a478c05d87f1e5ad821884501688696a7","modified":1527364222000},{"_id":"themes/Nlvi/layout/_partial/_post/toc.swig","hash":"1d72e1a01f298785e1fb5f2c4d8cfd407b1b2120","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/_analytics/baidu.swig","hash":"479c1e4486ea9832d4a0037da781ee991d7a6d50","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/_analytics/google.swig","hash":"d2652e285d64b850288448300707f37d56888df4","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/_analytics/busuanzi.swig","hash":"ff2669f1b33e3a1b0598502d56d62475ea3ee958","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/_comment/gitment.swig","hash":"bf753589f9d10377ccec310f4510df4a840d2542","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/_comment/disqus.swig","hash":"2e2e0e064f86936702ee5f1c880786581b7a5799","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/_comment/changyan.swig","hash":"d3304f4e58478c162cd5822815f4c06aacb18e0d","modified":1527364222000},{"_id":"themes/Nlvi/layout/_script/_plugin/search.swig","hash":"6f72b148a1b2551b36cb1893f3adc7ac769d9e10","modified":1527364222000},{"_id":"themes/Nlvi/source/font/iconfont/iconfont.eot","hash":"4987e7ec0fd6512659dd65600c50b5c7421cf619","modified":1527364222000},{"_id":"themes/Nlvi/source/font/iconfont/iconfont.ttf","hash":"b42123e78b016751a51de6e0893a8c7efb231d58","modified":1527364222000},{"_id":"themes/Nlvi/source/font/iconfont/iconfont.svg","hash":"fc226899fc0596c0e1a892323bc7e9fd7be15435","modified":1527364222000},{"_id":"themes/Nlvi/source/font/iconfont/iconfont.woff","hash":"54949e4b5bbd8a6453349b24264cc3c4a9205d34","modified":1527364222000},{"_id":"themes/Nlvi/source/script/src/nlvi.js","hash":"fc3309ea4040ffad50db2c9391f32c1ba8b8e122","modified":1527364222000},{"_id":"themes/Nlvi/source/script/scheme/balance.js","hash":"4b7bd958de0913fb71f68630467c20aac34c3348","modified":1527364222000},{"_id":"themes/Nlvi/source/script/src/utils.js","hash":"c73ad0d53c595dfae6bb700c2129226a9d2e7461","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_common/animation.styl","hash":"c75c7ce292f2c494361e4e034faf31e25b8f606e","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_common/global.styl","hash":"5046017c56d5590036e93237b9f0371c4f4db9c6","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_common/func.styl","hash":"6990c98d28fa46109cca26f8f02fccead8ca8e41","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_common/normalize.styl","hash":"0204871038355f90cb648f495ba26c9b29e69a5a","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_common/variable.styl","hash":"232f35175e8c72c179bacf0639fd2260516d70d0","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_custom/custom.styl","hash":"954a167563239ce54dc3907227fe192c65450b1d","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/footer.styl","hash":"b5e52f6f2f74d843f41e0a522da9f73beda2b40e","modified":1527364222000},{"_id":"themes/Nlvi/source/font/allura/allura.ttf","hash":"9f36627fa1afab68887d63cf002ab6646e62a798","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_common/_utils/device.styl","hash":"8a6e225ef5018f601a1fb485d694d007eaff024f","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_common/_utils/fonts.styl","hash":"97ebeef98cb46d5fd3c281a0ff2a49ba96d49013","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_common/_utils/iconfont.styl","hash":"4fb0c0652e22a797486b0705aa0f1805f39767bf","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_code/highlight.styl","hash":"caf2ee459e253ccf4f53ea6a6496f2889b79a7e0","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_code/index.styl","hash":"69cde3a96a19ac485cbc52832d5379faa57ab9f9","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_code/frame.styl","hash":"5cace14f2159175277636fdefacdfba93ba9f2dc","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_common/about.styl","hash":"e850d7a6604353307081ecbe9774452a15188db0","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_common/archive.styl","hash":"ec2651572fc3c578a824a2d9f33c940d8937cb50","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_common/header.styl","hash":"3a535db5d4d7da892a4e966fe61e2d110d972736","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_common/post.styl","hash":"cc2d85943022d90fef925d884bddc79aa036c8d0","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_page/paginator.styl","hash":"5c6e8c384c711fd5e51a4e88d58a975189a1aa05","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_post/copyright.styl","hash":"a79e4cc509eea2a95fb16d1b01f79c60f727f47b","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_post/reward.styl","hash":"0eeab281fc46d26c17254d6d8cb2d4f5ae66fd31","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/common.styl","hash":"ebcdd8c6cd492aa2ba97bcc7f50f5195fd747615","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_utils/progress.styl","hash":"1f00cc3500b95e6e6d44032b9366ea43beb533f7","modified":1527364222000},{"_id":"themes/Nlvi/source/script/lib/jquery/jquery-3.2.1.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1527364222000},{"_id":"themes/Nlvi/source/script/lib/lightbox/images/close.png","hash":"3ca48361cfe0e41163023d03c26296f375bb3eac","modified":1527364222000},{"_id":"themes/Nlvi/source/script/lib/lightbox/css/lightbox.min.css","hash":"1eacd12cdeb43eb7f06360949e129e83e66dfec4","modified":1527364222000},{"_id":"themes/Nlvi/source/script/lib/lightbox/images/next.png","hash":"777e92c050f600b4519299c3d786b8f2f459fea4","modified":1527364222000},{"_id":"themes/Nlvi/source/script/lib/lightbox/images/loading.gif","hash":"cf720b50cf8dde0e1a84ce1c6a77788bfc5882d5","modified":1527364222000},{"_id":"themes/Nlvi/source/script/lib/lightbox/images/prev.png","hash":"6640a3432f7ba7aea6129cdf7a5d3eabd47c295c","modified":1527364222000},{"_id":"themes/Nlvi/source/script/lib/lightbox/js/lightbox.min.js","hash":"2cc5973fd9ee6fbbd5b9facb9862bc3318153f53","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_balance/header.styl","hash":"4bae68e02ee7e6f2209d95a254b22fe92ebdea80","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_balance/container.styl","hash":"3947718d13ff4843ed78ee650eb5d55cdfd7ab64","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_balance/index.styl","hash":"978d222281c2ee96a1966f954f3787feba44e4f4","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_banderole/header.styl","hash":"2ce04a35c85ec64019dc6812307c63b3488e215d","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_banderole/container.styl","hash":"398fe712e1aed9535c68604ab1aba17059a1369d","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_banderole/index.styl","hash":"cc41a84a02847d093a07ccefdfa57cc0fe688c08","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_balance/_utils/tagcloud.styl","hash":"19880aa3b2e246610b4eb012950c6d52ad4e1fd9","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_balance/_utils/backtop.styl","hash":"2a26dc6566ab79f21724bc8b6106ccf5c5952f42","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_balance/_post/toc.styl","hash":"5d66be15bb7041818e1589e5f9c39dd6d7f58c06","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_balance/_utils/friendlink.styl","hash":"fb395c060ba99e45cf67e4f9b883ec4a2bde6cfd","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_banderole/_utils/backtop.styl","hash":"c3e1afb7e178c2921de5b37387f639c1e1d52f63","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_banderole/_post/toc.styl","hash":"998f1346fe63e8653964eebf7abee8d0dc1a4bd7","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_banderole/_utils/search.styl","hash":"0229b9850fb7e8f23a1e4da8f60cd1f8c9983d1b","modified":1527364222000},{"_id":"themes/Nlvi/source/style/_partial/_schemes/_banderole/_utils/tagcloud.styl","hash":"42d7d4793209098d319fda519a6831ee7b393dfe","modified":1527364222000}],"Category":[],"Data":[],"Page":[{"title":"About","type":"about","comments":0,"_content":"Eagle Li\n\n喜欢自己折腾一些感兴趣的小东西\n\n敲起代码不喜欢别打扰\n\n周末喜欢跳跳小舞，或者默默的在家里宅一天，或者在家里睡一天\n\n长假想要出去走走，看看这大好的风光\n\n在别人想着整一个美美的化妆台时，我想最多的是给自己整套大气磅礴的电脑桌\n\n舍不得买几百块钱的衣服，却在买电脑时没有考虑过一不小心花出了上万\n\n\n\n\n邮箱：liying_eagle@163.com","source":"about/index.md","raw":"title: About\ntype: \"about\"\ncomments: false\n---\nEagle Li\n\n喜欢自己折腾一些感兴趣的小东西\n\n敲起代码不喜欢别打扰\n\n周末喜欢跳跳小舞，或者默默的在家里宅一天，或者在家里睡一天\n\n长假想要出去走走，看看这大好的风光\n\n在别人想着整一个美美的化妆台时，我想最多的是给自己整套大气磅礴的电脑桌\n\n舍不得买几百块钱的衣服，却在买电脑时没有考虑过一不小心花出了上万\n\n\n\n\n邮箱：liying_eagle@163.com","date":"2018-06-09T12:49:38.124Z","updated":"2018-06-09T12:49:38.124Z","path":"about/index.html","_id":"cji7ec2xd0000bps65wuvq00y","layout":"page","content":"<p>Eagle Li</p>\n<p>喜欢自己折腾一些感兴趣的小东西</p>\n<p>敲起代码不喜欢别打扰</p>\n<p>周末喜欢跳跳小舞，或者默默的在家里宅一天，或者在家里睡一天</p>\n<p>长假想要出去走走，看看这大好的风光</p>\n<p>在别人想着整一个美美的化妆台时，我想最多的是给自己整套大气磅礴的电脑桌</p>\n<p>舍不得买几百块钱的衣服，却在买电脑时没有考虑过一不小心花出了上万</p>\n<p>邮箱：<a href=\"mailto:liying_eagle@163.com\" target=\"_blank\" rel=\"noopener\">liying_eagle@163.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Eagle Li</p>\n<p>喜欢自己折腾一些感兴趣的小东西</p>\n<p>敲起代码不喜欢别打扰</p>\n<p>周末喜欢跳跳小舞，或者默默的在家里宅一天，或者在家里睡一天</p>\n<p>长假想要出去走走，看看这大好的风光</p>\n<p>在别人想着整一个美美的化妆台时，我想最多的是给自己整套大气磅礴的电脑桌</p>\n<p>舍不得买几百块钱的衣服，却在买电脑时没有考虑过一不小心花出了上万</p>\n<p>邮箱：<a href=\"mailto:liying_eagle@163.com\" target=\"_blank\" rel=\"noopener\">liying_eagle@163.com</a></p>\n"}],"Post":[{"title":"hexo + github.io","date":"2018-06-05T16:14:18.000Z","_content":"\n### 第一步：需要的环境：\n   node环境  （[立即下载](https://nodejs.org/zh-cn/)）\n   git 环境  （[立即下载](https://git-scm.com/download/)）\n   因为习惯使用 yarn，所以如果你的环境中没有 yarn，那就需要安装。\n    [安装 homebrw](https://brew.sh/)\n    [安装 yarn](https://yarnpkg.com/en/docs/install#mac-stable)\n### 第二步：安装 hexo:\n([也可以按照官方网站就行安装](https://hexo.io/zh-cn/docs/index.html))\n1. 安装 hexo\n```\n$ yarn add -g hexo-cli\n```\n2. 创建一个新的 hexo 项目\n```\n$ hexo init blog（项目名字）\ncd blog\n$ yarn install\n```\n3. 启动项目\n```\n$ hexo server   // 启动之后再浏览器中打开 http://localhost:4000\n```\n\n项目文件结构为：\n\n<img src=\"./page.png\" alt=\"GitHub\" title=\"GitHub,Social Coding\" width=\"300\" />\n\n\n至此，我们本地的一个博客环境就已经搭建完成。\n常用的指令如下：([具体参数使用前查看详细文档](https://hexo.io/zh-cn/docs/commands.html))\n```\n$ hexo server = hexo s  // 启动项目\n$ hexo new = hexo n   // 创建新的文章，如果想要创建一个新页面需要加 page ,例如：$ hexo new page newPage\n$ hexo generate = hexo g  // 生成静态文件到 public 文件夹中\n$ hexo deploy = hexo d   // 部署播客到远端（比如github, heroku等平台）\n```\n### 第三步：更换主题\n现在为自己的博客找一个喜欢的主题：\n1. 进入[hexo 主题库](https://hexo.io/themes/)，选择一个自己喜欢的主题\n2. 点击自己喜欢的主题名字，进入对应主题的 github 项目中，可以通过 download 或者 git clone 的方式将主题下载下来\n3. 将下载下来的主题文件夹放在项目目中中的 themes 文件家中，修改 _config.yml 文件中的 theme 值为你下载的主题名字\n\n当前我所用的主题为 [clean-blog](https://github.com/klugjo/hexo-theme-clean-blog)\n\n### 第四步：搭建免费的 github.io 服务器\n\n首先明白什么是 github pages:\nGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\n\n每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过http://username.github.io 来访问你的个人主页。\n\n***特别注意：新建的项目名字必须是 usename.github.io。个人主页的网站内容是在master分支下的***\n\n\n1. 注册一个 github 账号，（例：用户名为eagle）激活之后，新建一个空项目名称为 eagle.github.io。\n\n2. 将本地环境推上线上环境，\n    1. 首先需要知道，如果直接访问 http://eagle.github.io 的时候，他会直接去找根目录下的 index.html 的静态文件。\n    2. Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问\n    3. 需要将hexo生成的静态文件，提交 commit 推到github上\n\n部署的方法一：\nhexo deploy ，可以参考 [官方的文档](https://hexo.io/docs/deployment.html)\n\n安装 hexo-deployer-git\n```\n$ yarn add hexo-deployer-git\n```\n配置：_config.xml\n```\ndeploy:\n  type: git\n  repo: git@github.com:jiji262/jiji262.github.io.git\n  branch: master\n```\n执行：\n```\n$ hexo d\n```\n\n执行之后可能会报错：\n```\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n则是因为没有设置好public key所致。\n在本机生成public key[参考github帮助](https://help.github.com/articles/connecting-to-github-with-ssh/)\n```\n$ ssh-keygen -t rsa -b 4096 -C \"xxx@xxx.com\"\n```\n然后在 user_id/.ssh 目录下会生成两个文件，id_rsa.pub和id_rsa.\n然后登陆github，在SSH设置页面添加上刚才的public key文件也就是id_rsa.pub的内容即可。\n\n根据本人尝试，问题出在自己的 github 账户切换出现的奇怪的 bug，设置好各种 deploy key 或者 public key 之后任然不行的话，可以尝试手动推送项目。\n\n部署方法二：\n\n将我们之前创建的repo克隆到本地，新建一个目录叫做deploy用于存放克隆的代码。\n\n写一个发布脚本：deploy.sh\n```\nhexo generate\ncp -R public/* deploy/eagle.github.io\ncd deploy/eagle.github.io\ngit add .\ngit commit -m “update blog”\ngit push origin master\n```\n\n做的事情很简单：复制 public 文件中的代码到 depoly/eagle.github.io 文件中，提交 commit ，推送代码到远程。\n\n至此，一个简单的博客建完  ^ - ^","source":"_posts/hexoGithubIo.md","raw":"---\ntitle: hexo + github.io\ndate: 2018-06-06 00:14:18\ntags: hexo\n---\n\n### 第一步：需要的环境：\n   node环境  （[立即下载](https://nodejs.org/zh-cn/)）\n   git 环境  （[立即下载](https://git-scm.com/download/)）\n   因为习惯使用 yarn，所以如果你的环境中没有 yarn，那就需要安装。\n    [安装 homebrw](https://brew.sh/)\n    [安装 yarn](https://yarnpkg.com/en/docs/install#mac-stable)\n### 第二步：安装 hexo:\n([也可以按照官方网站就行安装](https://hexo.io/zh-cn/docs/index.html))\n1. 安装 hexo\n```\n$ yarn add -g hexo-cli\n```\n2. 创建一个新的 hexo 项目\n```\n$ hexo init blog（项目名字）\ncd blog\n$ yarn install\n```\n3. 启动项目\n```\n$ hexo server   // 启动之后再浏览器中打开 http://localhost:4000\n```\n\n项目文件结构为：\n\n<img src=\"./page.png\" alt=\"GitHub\" title=\"GitHub,Social Coding\" width=\"300\" />\n\n\n至此，我们本地的一个博客环境就已经搭建完成。\n常用的指令如下：([具体参数使用前查看详细文档](https://hexo.io/zh-cn/docs/commands.html))\n```\n$ hexo server = hexo s  // 启动项目\n$ hexo new = hexo n   // 创建新的文章，如果想要创建一个新页面需要加 page ,例如：$ hexo new page newPage\n$ hexo generate = hexo g  // 生成静态文件到 public 文件夹中\n$ hexo deploy = hexo d   // 部署播客到远端（比如github, heroku等平台）\n```\n### 第三步：更换主题\n现在为自己的博客找一个喜欢的主题：\n1. 进入[hexo 主题库](https://hexo.io/themes/)，选择一个自己喜欢的主题\n2. 点击自己喜欢的主题名字，进入对应主题的 github 项目中，可以通过 download 或者 git clone 的方式将主题下载下来\n3. 将下载下来的主题文件夹放在项目目中中的 themes 文件家中，修改 _config.yml 文件中的 theme 值为你下载的主题名字\n\n当前我所用的主题为 [clean-blog](https://github.com/klugjo/hexo-theme-clean-blog)\n\n### 第四步：搭建免费的 github.io 服务器\n\n首先明白什么是 github pages:\nGitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。\n\n每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过http://username.github.io 来访问你的个人主页。\n\n***特别注意：新建的项目名字必须是 usename.github.io。个人主页的网站内容是在master分支下的***\n\n\n1. 注册一个 github 账号，（例：用户名为eagle）激活之后，新建一个空项目名称为 eagle.github.io。\n\n2. 将本地环境推上线上环境，\n    1. 首先需要知道，如果直接访问 http://eagle.github.io 的时候，他会直接去找根目录下的 index.html 的静态文件。\n    2. Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问\n    3. 需要将hexo生成的静态文件，提交 commit 推到github上\n\n部署的方法一：\nhexo deploy ，可以参考 [官方的文档](https://hexo.io/docs/deployment.html)\n\n安装 hexo-deployer-git\n```\n$ yarn add hexo-deployer-git\n```\n配置：_config.xml\n```\ndeploy:\n  type: git\n  repo: git@github.com:jiji262/jiji262.github.io.git\n  branch: master\n```\n执行：\n```\n$ hexo d\n```\n\n执行之后可能会报错：\n```\nPermission denied (publickey).\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n则是因为没有设置好public key所致。\n在本机生成public key[参考github帮助](https://help.github.com/articles/connecting-to-github-with-ssh/)\n```\n$ ssh-keygen -t rsa -b 4096 -C \"xxx@xxx.com\"\n```\n然后在 user_id/.ssh 目录下会生成两个文件，id_rsa.pub和id_rsa.\n然后登陆github，在SSH设置页面添加上刚才的public key文件也就是id_rsa.pub的内容即可。\n\n根据本人尝试，问题出在自己的 github 账户切换出现的奇怪的 bug，设置好各种 deploy key 或者 public key 之后任然不行的话，可以尝试手动推送项目。\n\n部署方法二：\n\n将我们之前创建的repo克隆到本地，新建一个目录叫做deploy用于存放克隆的代码。\n\n写一个发布脚本：deploy.sh\n```\nhexo generate\ncp -R public/* deploy/eagle.github.io\ncd deploy/eagle.github.io\ngit add .\ngit commit -m “update blog”\ngit push origin master\n```\n\n做的事情很简单：复制 public 文件中的代码到 depoly/eagle.github.io 文件中，提交 commit ，推送代码到远程。\n\n至此，一个简单的博客建完  ^ - ^","slug":"hexoGithubIo","published":1,"updated":"2018-06-06T15:25:44.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji7ec2xe0001bps6oc50jj3m","content":"<h3 id=\"第一步：需要的环境：\"><a href=\"#第一步：需要的环境：\" class=\"headerlink\" title=\"第一步：需要的环境：\"></a>第一步：需要的环境：</h3><p>   node环境  （<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">立即下载</a>）<br>   git 环境  （<a href=\"https://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">立即下载</a>）<br>   因为习惯使用 yarn，所以如果你的环境中没有 yarn，那就需要安装。<br>    <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">安装 homebrw</a><br>    <a href=\"https://yarnpkg.com/en/docs/install#mac-stable\" target=\"_blank\" rel=\"noopener\">安装 yarn</a></p>\n<h3 id=\"第二步：安装-hexo\"><a href=\"#第二步：安装-hexo\" class=\"headerlink\" title=\"第二步：安装 hexo:\"></a>第二步：安装 hexo:</h3><p>(<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">也可以按照官方网站就行安装</a>)</p>\n<ol>\n<li><p>安装 hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add -g hexo-cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个新的 hexo 项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog（项目名字）</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">$ yarn install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server   // 启动之后再浏览器中打开 http://localhost:4000</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>项目文件结构为：</p>\n<p><img src=\"./page.png\" alt=\"GitHub\" title=\"GitHub,Social Coding\" width=\"300\"></p>\n<p>至此，我们本地的一个博客环境就已经搭建完成。<br>常用的指令如下：(<a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"noopener\">具体参数使用前查看详细文档</a>)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server = hexo s  // 启动项目</span><br><span class=\"line\">$ hexo new = hexo n   // 创建新的文章，如果想要创建一个新页面需要加 page ,例如：$ hexo new page newPage</span><br><span class=\"line\">$ hexo generate = hexo g  // 生成静态文件到 public 文件夹中</span><br><span class=\"line\">$ hexo deploy = hexo d   // 部署播客到远端（比如github, heroku等平台）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第三步：更换主题\"><a href=\"#第三步：更换主题\" class=\"headerlink\" title=\"第三步：更换主题\"></a>第三步：更换主题</h3><p>现在为自己的博客找一个喜欢的主题：</p>\n<ol>\n<li>进入<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo 主题库</a>，选择一个自己喜欢的主题</li>\n<li>点击自己喜欢的主题名字，进入对应主题的 github 项目中，可以通过 download 或者 git clone 的方式将主题下载下来</li>\n<li>将下载下来的主题文件夹放在项目目中中的 themes 文件家中，修改 _config.yml 文件中的 theme 值为你下载的主题名字</li>\n</ol>\n<p>当前我所用的主题为 <a href=\"https://github.com/klugjo/hexo-theme-clean-blog\" target=\"_blank\" rel=\"noopener\">clean-blog</a></p>\n<h3 id=\"第四步：搭建免费的-github-io-服务器\"><a href=\"#第四步：搭建免费的-github-io-服务器\" class=\"headerlink\" title=\"第四步：搭建免费的 github.io 服务器\"></a>第四步：搭建免费的 github.io 服务器</h3><p>首先明白什么是 github pages:<br>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p>\n<p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 来访问你的个人主页。</p>\n<p><strong><em>特别注意：新建的项目名字必须是 usename.github.io。个人主页的网站内容是在master分支下的</em></strong></p>\n<ol>\n<li><p>注册一个 github 账号，（例：用户名为eagle）激活之后，新建一个空项目名称为 eagle.github.io。</p>\n</li>\n<li><p>将本地环境推上线上环境，</p>\n<ol>\n<li>首先需要知道，如果直接访问 <a href=\"http://eagle.github.io\" target=\"_blank\" rel=\"noopener\">http://eagle.github.io</a> 的时候，他会直接去找根目录下的 index.html 的静态文件。</li>\n<li>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问</li>\n<li>需要将hexo生成的静态文件，提交 commit 推到github上</li>\n</ol>\n</li>\n</ol>\n<p>部署的方法一：<br>hexo deploy ，可以参考 <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">官方的文档</a></p>\n<p>安装 hexo-deployer-git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>配置：_config.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:jiji262/jiji262.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>执行之后可能会报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure></p>\n<p>则是因为没有设置好public key所致。<br>在本机生成public key<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"noopener\">参考github帮助</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -b 4096 -C &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure></p>\n<p>然后在 user_id/.ssh 目录下会生成两个文件，id_rsa.pub和id_rsa.<br>然后登陆github，在SSH设置页面添加上刚才的public key文件也就是id_rsa.pub的内容即可。</p>\n<p>根据本人尝试，问题出在自己的 github 账户切换出现的奇怪的 bug，设置好各种 deploy key 或者 public key 之后任然不行的话，可以尝试手动推送项目。</p>\n<p>部署方法二：</p>\n<p>将我们之前创建的repo克隆到本地，新建一个目录叫做deploy用于存放克隆的代码。</p>\n<p>写一个发布脚本：deploy.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">cp -R public/* deploy/eagle.github.io</span><br><span class=\"line\">cd deploy/eagle.github.io</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m “update blog”</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<p>做的事情很简单：复制 public 文件中的代码到 depoly/eagle.github.io 文件中，提交 commit ，推送代码到远程。</p>\n<p>至此，一个简单的博客建完  ^ - ^</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"第一步：需要的环境：\"><a href=\"#第一步：需要的环境：\" class=\"headerlink\" title=\"第一步：需要的环境：\"></a>第一步：需要的环境：</h3><p>   node环境  （<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">立即下载</a>）<br>   git 环境  （<a href=\"https://git-scm.com/download/\" target=\"_blank\" rel=\"noopener\">立即下载</a>）<br>   因为习惯使用 yarn，所以如果你的环境中没有 yarn，那就需要安装。<br>    <a href=\"https://brew.sh/\" target=\"_blank\" rel=\"noopener\">安装 homebrw</a><br>    <a href=\"https://yarnpkg.com/en/docs/install#mac-stable\" target=\"_blank\" rel=\"noopener\">安装 yarn</a></p>\n<h3 id=\"第二步：安装-hexo\"><a href=\"#第二步：安装-hexo\" class=\"headerlink\" title=\"第二步：安装 hexo:\"></a>第二步：安装 hexo:</h3><p>(<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">也可以按照官方网站就行安装</a>)</p>\n<ol>\n<li><p>安装 hexo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add -g hexo-cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个新的 hexo 项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog（项目名字）</span><br><span class=\"line\">cd blog</span><br><span class=\"line\">$ yarn install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server   // 启动之后再浏览器中打开 http://localhost:4000</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>项目文件结构为：</p>\n<p><img src=\"./page.png\" alt=\"GitHub\" title=\"GitHub,Social Coding\" width=\"300\"></p>\n<p>至此，我们本地的一个博客环境就已经搭建完成。<br>常用的指令如下：(<a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"noopener\">具体参数使用前查看详细文档</a>)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server = hexo s  // 启动项目</span><br><span class=\"line\">$ hexo new = hexo n   // 创建新的文章，如果想要创建一个新页面需要加 page ,例如：$ hexo new page newPage</span><br><span class=\"line\">$ hexo generate = hexo g  // 生成静态文件到 public 文件夹中</span><br><span class=\"line\">$ hexo deploy = hexo d   // 部署播客到远端（比如github, heroku等平台）</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第三步：更换主题\"><a href=\"#第三步：更换主题\" class=\"headerlink\" title=\"第三步：更换主题\"></a>第三步：更换主题</h3><p>现在为自己的博客找一个喜欢的主题：</p>\n<ol>\n<li>进入<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">hexo 主题库</a>，选择一个自己喜欢的主题</li>\n<li>点击自己喜欢的主题名字，进入对应主题的 github 项目中，可以通过 download 或者 git clone 的方式将主题下载下来</li>\n<li>将下载下来的主题文件夹放在项目目中中的 themes 文件家中，修改 _config.yml 文件中的 theme 值为你下载的主题名字</li>\n</ol>\n<p>当前我所用的主题为 <a href=\"https://github.com/klugjo/hexo-theme-clean-blog\" target=\"_blank\" rel=\"noopener\">clean-blog</a></p>\n<h3 id=\"第四步：搭建免费的-github-io-服务器\"><a href=\"#第四步：搭建免费的-github-io-服务器\" class=\"headerlink\" title=\"第四步：搭建免费的 github.io 服务器\"></a>第四步：搭建免费的 github.io 服务器</h3><p>首先明白什么是 github pages:<br>GitHub Pages 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，用来做搭建一个博客再好不过了。</p>\n<p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href=\"http://username.github.io\" target=\"_blank\" rel=\"noopener\">http://username.github.io</a> 来访问你的个人主页。</p>\n<p><strong><em>特别注意：新建的项目名字必须是 usename.github.io。个人主页的网站内容是在master分支下的</em></strong></p>\n<ol>\n<li><p>注册一个 github 账号，（例：用户名为eagle）激活之后，新建一个空项目名称为 eagle.github.io。</p>\n</li>\n<li><p>将本地环境推上线上环境，</p>\n<ol>\n<li>首先需要知道，如果直接访问 <a href=\"http://eagle.github.io\" target=\"_blank\" rel=\"noopener\">http://eagle.github.io</a> 的时候，他会直接去找根目录下的 index.html 的静态文件。</li>\n<li>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问</li>\n<li>需要将hexo生成的静态文件，提交 commit 推到github上</li>\n</ol>\n</li>\n</ol>\n<p>部署的方法一：<br>hexo deploy ，可以参考 <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">官方的文档</a></p>\n<p>安装 hexo-deployer-git<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yarn add hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>配置：_config.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:jiji262/jiji262.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<p>执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>执行之后可能会报错：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure></p>\n<p>则是因为没有设置好public key所致。<br>在本机生成public key<a href=\"https://help.github.com/articles/connecting-to-github-with-ssh/\" target=\"_blank\" rel=\"noopener\">参考github帮助</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -b 4096 -C &quot;xxx@xxx.com&quot;</span><br></pre></td></tr></table></figure></p>\n<p>然后在 user_id/.ssh 目录下会生成两个文件，id_rsa.pub和id_rsa.<br>然后登陆github，在SSH设置页面添加上刚才的public key文件也就是id_rsa.pub的内容即可。</p>\n<p>根据本人尝试，问题出在自己的 github 账户切换出现的奇怪的 bug，设置好各种 deploy key 或者 public key 之后任然不行的话，可以尝试手动推送项目。</p>\n<p>部署方法二：</p>\n<p>将我们之前创建的repo克隆到本地，新建一个目录叫做deploy用于存放克隆的代码。</p>\n<p>写一个发布脚本：deploy.sh<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br><span class=\"line\">cp -R public/* deploy/eagle.github.io</span><br><span class=\"line\">cd deploy/eagle.github.io</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m “update blog”</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<p>做的事情很简单：复制 public 文件中的代码到 depoly/eagle.github.io 文件中，提交 commit ，推送代码到远程。</p>\n<p>至此，一个简单的博客建完  ^ - ^</p>\n"},{"title":"Git Command","date":"2018-06-09T12:51:35.000Z","_content":"\n使用 github 很久了，但是一直没有仔细研究过 git 指令，现在把自己常用的 git 指令总结，方便翻阅：\n\n### 新建代码库\n\n```\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n### 配置 git\n\n1. git 基本配置：\n\ngit 的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n```\n# 显示当前的Git配置（如果加 --global 表示设置全局）\n$ git config --list [--global]\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息 \n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n2. fork 代码库\n\n\n如果想要将那些开源的代码直接fork 到自己的 github 中，我们可以直接点击 github 网站中的 fork 按钮。\n```\n# 显示所有远程仓库\n$ git remote -v\n\n# 查看帮助\n$ git remote —help  \n\n# 删除 origin\n$ git remote remove origin  \n\n# 将当前的代码塞进刚建的心的项目\n$ git remote add origin [url]\n\n# 推送当前的代码到远程的 master 分支\n$ git push -u origin master\n\n# 监听版本更新:\n$ git remote add upstream [url]\n```\n### 文件管理\n```\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n### 分支管理\n```\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n```\n\n### commit 管理\n```\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n### 查看信息\n```\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n### 同步远程分支\n\n```\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n### 撤销某些操作\n```\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 撤回上一次 commit\n$ git reset HEAD^\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n### 变基\n\n在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。\nmerge 命令不会保留 merge 的分支的 commit\nrebase 命令会保留 merge 的分支的 commit\n\n\n```\n# 从源分支进行变基\n$ git rebase origin\n\n# 变基倒数三个 commit\n$ git rebase -i HEAD~3\n\n# 继续执行\n$ git rebase --continue\n\n# 停止变基\n$ git rebase --abort\n```","source":"_posts/gitCommand.md","raw":"---\ntitle: Git Command\ndate: 2018-06-09 20:51:35\ntags: git\n---\n\n使用 github 很久了，但是一直没有仔细研究过 git 指令，现在把自己常用的 git 指令总结，方便翻阅：\n\n### 新建代码库\n\n```\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n```\n\n### 配置 git\n\n1. git 基本配置：\n\ngit 的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n```\n# 显示当前的Git配置（如果加 --global 表示设置全局）\n$ git config --list [--global]\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息 \n$ git config [--global] user.name \"[name]\"\n$ git config [--global] user.email \"[email address]\"\n```\n\n2. fork 代码库\n\n\n如果想要将那些开源的代码直接fork 到自己的 github 中，我们可以直接点击 github 网站中的 fork 按钮。\n```\n# 显示所有远程仓库\n$ git remote -v\n\n# 查看帮助\n$ git remote —help  \n\n# 删除 origin\n$ git remote remove origin  \n\n# 将当前的代码塞进刚建的心的项目\n$ git remote add origin [url]\n\n# 推送当前的代码到远程的 master 分支\n$ git push -u origin master\n\n# 监听版本更新:\n$ git remote add upstream [url]\n```\n### 文件管理\n```\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n```\n\n### 分支管理\n```\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n```\n\n### commit 管理\n```\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n```\n\n### 查看信息\n```\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n```\n\n### 同步远程分支\n\n```\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n```\n\n### 撤销某些操作\n```\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 撤回上一次 commit\n$ git reset HEAD^\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n```\n\n### 变基\n\n在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。\nmerge 命令不会保留 merge 的分支的 commit\nrebase 命令会保留 merge 的分支的 commit\n\n\n```\n# 从源分支进行变基\n$ git rebase origin\n\n# 变基倒数三个 commit\n$ git rebase -i HEAD~3\n\n# 继续执行\n$ git rebase --continue\n\n# 停止变基\n$ git rebase --abort\n```","slug":"gitCommand","published":1,"updated":"2018-06-09T13:22:25.448Z","_id":"cji7efep90004bps6ssex8led","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用 github 很久了，但是一直没有仔细研究过 git 指令，现在把自己常用的 git 指令总结，方便翻阅：</p>\n<h3 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在当前目录新建一个Git代码库</span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个目录，将其初始化为Git代码库</span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载一个项目和它的整个代码历史</span><br><span class=\"line\">$ git clone [url]</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-git\"><a href=\"#配置-git\" class=\"headerlink\" title=\"配置 git\"></a>配置 git</h3><ol>\n<li>git 基本配置：</li>\n</ol>\n<p>git 的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示当前的Git配置（如果加 --global 表示设置全局）</span><br><span class=\"line\">$ git config --list [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑Git配置文件</span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置提交代码时的用户信息 </span><br><span class=\"line\">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class=\"line\">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>fork 代码库</li>\n</ol>\n<p>如果想要将那些开源的代码直接fork 到自己的 github 中，我们可以直接点击 github 网站中的 fork 按钮。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示所有远程仓库</span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看帮助</span><br><span class=\"line\">$ git remote —help  </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除 origin</span><br><span class=\"line\">$ git remote remove origin  </span><br><span class=\"line\"></span><br><span class=\"line\"># 将当前的代码塞进刚建的心的项目</span><br><span class=\"line\">$ git remote add origin [url]</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送当前的代码到远程的 master 分支</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\"></span><br><span class=\"line\"># 监听版本更新:</span><br><span class=\"line\">$ git remote add upstream [url]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加指定文件到暂存区</span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加指定目录到暂存区，包括子目录</span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加当前目录的所有文件到暂存区</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加每个变化前，都会要求确认</span><br><span class=\"line\"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 改名文件，并且将这个改名放入暂存区</span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出所有本地分支</span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有远程分支</span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有本地分支和远程分支</span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个分支，但依然停留在当前分支</span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个分支，并切换到该分支</span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个分支，指向指定commit</span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到指定分支，并更新工作区</span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到上一个分支</span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class=\"line\">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 合并指定分支到当前分支</span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 选择一个commit，合并进当前分支</span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除分支</span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除远程分支</span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n<h3 id=\"commit-管理\"><a href=\"#commit-管理\" class=\"headerlink\" title=\"commit 管理\"></a>commit 管理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 提交暂存区到仓库区</span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交暂存区的指定文件到仓库区</span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交时显示所有diff信息</span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用一次新的commit，替代上一次提交</span><br><span class=\"line\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"># 重做上一次commit，并包括指定文件的新变化</span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示有变更的文件</span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示当前分支的版本历史</span><br><span class=\"line\">$ git log</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class=\"line\">$ git log --stat</span><br><span class=\"line\"></span><br><span class=\"line\"># 搜索提交历史，根据关键词</span><br><span class=\"line\">$ git log -S [keyword]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class=\"line\">$ git log [tag] HEAD --pretty=format:%s</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class=\"line\">$ git log [tag] HEAD --grep feature</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某个文件的版本历史，包括文件改名</span><br><span class=\"line\">$ git log --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示指定文件相关的每一次diff</span><br><span class=\"line\">$ git log -p [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示过去5次提交</span><br><span class=\"line\">$ git log -5 --pretty --oneline</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示所有提交过的用户，按提交次数排序</span><br><span class=\"line\">$ git shortlog -sn</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示指定文件是什么人在什么时间修改过</span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示暂存区和工作区的差异</span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示暂存区和上一个commit的差异</span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示工作区与当前分支最新commit之间的差异</span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示两次提交之间的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示今天你写了多少行代码</span><br><span class=\"line\">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某次提交的元数据和内容变化</span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某次提交发生变化的文件</span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某次提交时，某个文件的内容</span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示当前分支的最近几次提交</span><br><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n<h3 id=\"同步远程分支\"><a href=\"#同步远程分支\" class=\"headerlink\" title=\"同步远程分支\"></a>同步远程分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载远程仓库的所有变动</span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示所有远程仓库</span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某个远程仓库的信息</span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"># 增加一个新的远程仓库，并命名</span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"># 取回远程仓库的变化，并与本地分支合并</span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传本地指定分支到远程仓库</span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送所有分支到远程仓库</span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销某些操作\"><a href=\"#撤销某些操作\" class=\"headerlink\" title=\"撤销某些操作\"></a>撤销某些操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 恢复暂存区的指定文件到工作区</span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复暂存区的所有文件到工作区</span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 撤回上一次 commit</span><br><span class=\"line\">$ git reset HEAD^</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个commit，用来撤销指定commit</span><br><span class=\"line\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 暂时将未提交的变化移除，稍后再移入</span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n<h3 id=\"变基\"><a href=\"#变基\" class=\"headerlink\" title=\"变基\"></a>变基</h3><p>在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。<br>merge 命令不会保留 merge 的分支的 commit<br>rebase 命令会保留 merge 的分支的 commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从源分支进行变基</span><br><span class=\"line\">$ git rebase origin</span><br><span class=\"line\"></span><br><span class=\"line\"># 变基倒数三个 commit</span><br><span class=\"line\">$ git rebase -i HEAD~3</span><br><span class=\"line\"></span><br><span class=\"line\"># 继续执行</span><br><span class=\"line\">$ git rebase --continue</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止变基</span><br><span class=\"line\">$ git rebase --abort</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>使用 github 很久了，但是一直没有仔细研究过 git 指令，现在把自己常用的 git 指令总结，方便翻阅：</p>\n<h3 id=\"新建代码库\"><a href=\"#新建代码库\" class=\"headerlink\" title=\"新建代码库\"></a>新建代码库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在当前目录新建一个Git代码库</span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个目录，将其初始化为Git代码库</span><br><span class=\"line\">$ git init [project-name]</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载一个项目和它的整个代码历史</span><br><span class=\"line\">$ git clone [url]</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-git\"><a href=\"#配置-git\" class=\"headerlink\" title=\"配置 git\"></a>配置 git</h3><ol>\n<li>git 基本配置：</li>\n</ol>\n<p>git 的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示当前的Git配置（如果加 --global 表示设置全局）</span><br><span class=\"line\">$ git config --list [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑Git配置文件</span><br><span class=\"line\">$ git config -e [--global]</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置提交代码时的用户信息 </span><br><span class=\"line\">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class=\"line\">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>fork 代码库</li>\n</ol>\n<p>如果想要将那些开源的代码直接fork 到自己的 github 中，我们可以直接点击 github 网站中的 fork 按钮。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示所有远程仓库</span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看帮助</span><br><span class=\"line\">$ git remote —help  </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除 origin</span><br><span class=\"line\">$ git remote remove origin  </span><br><span class=\"line\"></span><br><span class=\"line\"># 将当前的代码塞进刚建的心的项目</span><br><span class=\"line\">$ git remote add origin [url]</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送当前的代码到远程的 master 分支</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\"></span><br><span class=\"line\"># 监听版本更新:</span><br><span class=\"line\">$ git remote add upstream [url]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 添加指定文件到暂存区</span><br><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加指定目录到暂存区，包括子目录</span><br><span class=\"line\">$ git add [dir]</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加当前目录的所有文件到暂存区</span><br><span class=\"line\">$ git add .</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加每个变化前，都会要求确认</span><br><span class=\"line\"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class=\"line\">$ git add -p</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class=\"line\">$ git rm [file1] [file2] ...</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class=\"line\">$ git rm --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 改名文件，并且将这个改名放入暂存区</span><br><span class=\"line\">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>\n<h3 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出所有本地分支</span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有远程分支</span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出所有本地分支和远程分支</span><br><span class=\"line\">$ git branch -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个分支，但依然停留在当前分支</span><br><span class=\"line\">$ git branch [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个分支，并切换到该分支</span><br><span class=\"line\">$ git checkout -b [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个分支，指向指定commit</span><br><span class=\"line\">$ git branch [branch] [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class=\"line\">$ git branch --track [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到指定分支，并更新工作区</span><br><span class=\"line\">$ git checkout [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到上一个分支</span><br><span class=\"line\">$ git checkout -</span><br><span class=\"line\"></span><br><span class=\"line\"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class=\"line\">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 合并指定分支到当前分支</span><br><span class=\"line\">$ git merge [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 选择一个commit，合并进当前分支</span><br><span class=\"line\">$ git cherry-pick [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除分支</span><br><span class=\"line\">$ git branch -d [branch-name]</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除远程分支</span><br><span class=\"line\">$ git push origin --delete [branch-name]</span><br><span class=\"line\">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>\n<h3 id=\"commit-管理\"><a href=\"#commit-管理\" class=\"headerlink\" title=\"commit 管理\"></a>commit 管理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 提交暂存区到仓库区</span><br><span class=\"line\">$ git commit -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交暂存区的指定文件到仓库区</span><br><span class=\"line\">$ git commit [file1] [file2] ... -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class=\"line\">$ git commit -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 提交时显示所有diff信息</span><br><span class=\"line\">$ git commit -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用一次新的commit，替代上一次提交</span><br><span class=\"line\"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class=\"line\">$ git commit --amend -m [message]</span><br><span class=\"line\"></span><br><span class=\"line\"># 重做上一次commit，并包括指定文件的新变化</span><br><span class=\"line\">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看信息\"><a href=\"#查看信息\" class=\"headerlink\" title=\"查看信息\"></a>查看信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 显示有变更的文件</span><br><span class=\"line\">$ git status</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示当前分支的版本历史</span><br><span class=\"line\">$ git log</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class=\"line\">$ git log --stat</span><br><span class=\"line\"></span><br><span class=\"line\"># 搜索提交历史，根据关键词</span><br><span class=\"line\">$ git log -S [keyword]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class=\"line\">$ git log [tag] HEAD --pretty=format:%s</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class=\"line\">$ git log [tag] HEAD --grep feature</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某个文件的版本历史，包括文件改名</span><br><span class=\"line\">$ git log --follow [file]</span><br><span class=\"line\">$ git whatchanged [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示指定文件相关的每一次diff</span><br><span class=\"line\">$ git log -p [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示过去5次提交</span><br><span class=\"line\">$ git log -5 --pretty --oneline</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示所有提交过的用户，按提交次数排序</span><br><span class=\"line\">$ git shortlog -sn</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示指定文件是什么人在什么时间修改过</span><br><span class=\"line\">$ git blame [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示暂存区和工作区的差异</span><br><span class=\"line\">$ git diff</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示暂存区和上一个commit的差异</span><br><span class=\"line\">$ git diff --cached [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示工作区与当前分支最新commit之间的差异</span><br><span class=\"line\">$ git diff HEAD</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示两次提交之间的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示今天你写了多少行代码</span><br><span class=\"line\">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某次提交的元数据和内容变化</span><br><span class=\"line\">$ git show [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某次提交发生变化的文件</span><br><span class=\"line\">$ git show --name-only [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某次提交时，某个文件的内容</span><br><span class=\"line\">$ git show [commit]:[filename]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示当前分支的最近几次提交</span><br><span class=\"line\">$ git reflog</span><br></pre></td></tr></table></figure>\n<h3 id=\"同步远程分支\"><a href=\"#同步远程分支\" class=\"headerlink\" title=\"同步远程分支\"></a>同步远程分支</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载远程仓库的所有变动</span><br><span class=\"line\">$ git fetch [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示所有远程仓库</span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示某个远程仓库的信息</span><br><span class=\"line\">$ git remote show [remote]</span><br><span class=\"line\"></span><br><span class=\"line\"># 增加一个新的远程仓库，并命名</span><br><span class=\"line\">$ git remote add [shortname] [url]</span><br><span class=\"line\"></span><br><span class=\"line\"># 取回远程仓库的变化，并与本地分支合并</span><br><span class=\"line\">$ git pull [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传本地指定分支到远程仓库</span><br><span class=\"line\">$ git push [remote] [branch]</span><br><span class=\"line\"></span><br><span class=\"line\"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class=\"line\">$ git push [remote] --force</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送所有分支到远程仓库</span><br><span class=\"line\">$ git push [remote] --all</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销某些操作\"><a href=\"#撤销某些操作\" class=\"headerlink\" title=\"撤销某些操作\"></a>撤销某些操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 恢复暂存区的指定文件到工作区</span><br><span class=\"line\">$ git checkout [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class=\"line\">$ git checkout [commit] [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复暂存区的所有文件到工作区</span><br><span class=\"line\">$ git checkout .</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class=\"line\">$ git reset [file]</span><br><span class=\"line\"></span><br><span class=\"line\"># 撤回上一次 commit</span><br><span class=\"line\">$ git reset HEAD^</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class=\"line\">$ git reset --hard</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class=\"line\">$ git reset [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class=\"line\">$ git reset --hard [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class=\"line\">$ git reset --keep [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建一个commit，用来撤销指定commit</span><br><span class=\"line\"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class=\"line\">$ git revert [commit]</span><br><span class=\"line\"></span><br><span class=\"line\"># 暂时将未提交的变化移除，稍后再移入</span><br><span class=\"line\">$ git stash</span><br><span class=\"line\">$ git stash pop</span><br></pre></td></tr></table></figure>\n<h3 id=\"变基\"><a href=\"#变基\" class=\"headerlink\" title=\"变基\"></a>变基</h3><p>在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。<br>merge 命令不会保留 merge 的分支的 commit<br>rebase 命令会保留 merge 的分支的 commit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 从源分支进行变基</span><br><span class=\"line\">$ git rebase origin</span><br><span class=\"line\"></span><br><span class=\"line\"># 变基倒数三个 commit</span><br><span class=\"line\">$ git rebase -i HEAD~3</span><br><span class=\"line\"></span><br><span class=\"line\"># 继续执行</span><br><span class=\"line\">$ git rebase --continue</span><br><span class=\"line\"></span><br><span class=\"line\"># 停止变基</span><br><span class=\"line\">$ git rebase --abort</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cji7ec2xe0001bps6oc50jj3m","tag_id":"cji7ec2xi0002bps6ecz6evvb","_id":"cji7ec2xk0003bps61dp6d4dj"},{"post_id":"cji7efep90004bps6ssex8led","tag_id":"cji7efk410005bps62v0w57up","_id":"cji7efk410006bps6r217b9k9"}],"Tag":[{"name":"hexo","_id":"cji7ec2xi0002bps6ecz6evvb"},{"name":"git","_id":"cji7efk410005bps62v0w57up"}]}}